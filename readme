1.package.json说明：
    {
      "name": "demo", // 项目名字
      "version": "1.0.0", // 项目版本
      "description": "...", // 项目简介
      "main": "index.js", // 项目入口js，用不到，写一个在这里当摆设
      "scripts": {
        "watch": "node server.js", // 开发模式运行此命令启动服务
        "build": "webpack -p --config webpack.production.config.js --progress --profile --colors" // 项目最终打包 运行此命令（webpack.production.config.js是后面要创建的webpack配置文件）
      },
      "author": "lin.chen", // 项目作者
      "license": "ISC", // 项目开源许可证
      "private": true, // 项目是否私有

      // 项目最终需要依赖的插件
      "dependencies": {
        "antd": "^2.6.3", // 蚂蚁金服的ui库
        "babel-polyfill": "^6.20.0", // 用于解析ES6各种新功能（比如map,set,Generator等）
        "react": "^15.4.2", // react框架核心
        "react-dom": "^15.4.2", // react渲染组件时要用
        "react-redux": "^5.0.1", // react与redux连接的桥梁
        "react-router": "^3.0.0", // react路由器，做路由要用
        "react-router-redux": "^4.0.7", // react路由与redux连接的桥梁
        "redux": "^3.6.0", // redux核心
        "redux-thunk": "^2.1.0", // redux中间件，用于处理异步action
        "reqwest": "^2.0.5" // 一个工具插件，封装了fetch，异步请求时有用
      },

     // 开发模式下需要依赖的插件
      "devDependencies": {
        "babel-core": "^6.21.0", // babel核心
        "babel-loader": "^6.2.10", // webpack解析器：用于打包时解析ES6
        "babel-plugin-import": "^1.1.0", // 按需加载，用于蚂蚁金服ui库，用了哪些ui组件，就编译哪些组件
        "babel-preset-es2015": "^6.18.0", // babel插件：解析ES6语法
        "babel-preset-react": "^6.16.0", // babel插件：解析react语法（JSX）
        "babel-preset-stage-3": "^6.17.0", // babel插件：解析js目前最新版本的一些语法
        "css-loader": "^0.26.1", // webpack解析器：打包时处理css,less,sass这类文件中的url路径问题，比如background-image的路径,会自动匹配项目的根路径
        "eslint": "^3.13.1", // 一个语法检查器，在开发的时候常用来规范代码风格和排错
        "eslint-loader": "^1.6.1", // webpack解析器：把eslint加到webpack中使用，所以需要这个
        "eslint-plugin-react": "^6.9.0", // eslint插件：支持检查react的语法
        "extract-text-webpack-plugin": "^1.0.1", // 项目最终打包时，单独把所有样式文件打包成一个css文件，需要这个
        "file-loader": "^0.9.0", // webpack解析器：打包时解析各种非图片类文件和gif文件
        "html-webpack-plugin": "^2.26.0", // webpack插件：打包时自动生成一个index.html
        "less": "^2.7.2", // less核心
        "less-loader": "^2.2.3", // webpack解析器：打包时解析less
        "style-loader": "^0.13.1", // webpack解析器：打包时将样式文件添加进页面中，自动生成<style>标签
        "url-loader": "^0.5.7", // webpack解析器：处理图片或其他文件，会把小图片编译为base64编码
        "webpack": "^1.14.0", // webpack模块化打包工具
        "webpack-dev-server": "^1.16.2" // 一个和webpack配合使用的服务器工具，打包完成后启动一个服务，让开发人员方便测试，相当于tomcat
      }
    }

2..babelrc配置
    {
      // 运用babel的3个插件，es2015,stage-3,react （即npm install时的那3个插件）
      "presets": ["es2015", "stage-3", 'react'],
      // 下面是配置按需加载那个插件的（babel-plugin-import）
      // 是从蚂蚁金服抄的，大致意思就是，css、less等样式文件需要按需加载
      // js也要按需加载
      "plugins": [["import",[
        {
          "libraryName": "antd",
          "libraryDirectory": "lib",
          "style": true
        },
        {
          "libraryName": "antd-mobile",
          "libraryDirectory": "component",
        },
      ]]]
    }

3..eslintrc.json，可参考：http://eslint.cn/
    {
        // 项目的环境
        // 意思就是以下配置的这些环境，它们自身的全局变量,eslint认为是存在的，比如jquery的$,如果下面不配置jquery:true,项目中直接使用$,eslint会认为$未定义
        "env": {
            "browser": true,  // 浏览器环境，window变量等
            "commonjs": true, // commonjs环境，require方法等
            "es6": true, // es6环境，各种es6新功能
            "jquery": true // jquery, 就是$符号
        },
        // 继承某个官方定义好的检查规则
        // 下面用的是react的规则，必须配这个，否则eslint识别不了react
        "extends": "plugin:react/recommended",
        // 设置各种解析器
        "parserOptions": {
            "ecmaVersion": 8, // js版本，最新的8（即JS2017）
            "ecmaFeatures": { // 额外的语言特性
                "impliedStrict": true, // 全局启用严格模式
                "experimentalObjectRestSpread": true, // 支持...余运算符，就是ES6里面那个“...”解构赋值
                "jsx": true // jsx语法
            },
            "sourceType": "module" // 代码类型：模块化。因为我们经常用import,export等
        },
        // 第3方插件
        "plugins": [
            "react" // 支持react(即eslint-plugin-react)，上面配置了jsx,但react语法不仅仅是jsx，所以需要这个
        ],
        // 自定义的检查规则
        "rules": {
            // 字符串的引号必须用单引号
            "quotes": [
                "error",
                "single"
            ],
            // 每一句代码结束必须加分号
            "semi": [
                "error",
                "always"
            ],
            "no-cond-assign": "error", // 禁止条件表达式中出现赋值操作符
            "no-debugger": "error", // 不允许代码中出现debugger
            "no-dupe-args": "error", // function禁止重名参数
            "no-caller": "error", // 禁用 arguments.caller 或 arguments.callee
            "no-invalid-this": "error", // 禁止全局this
            "no-unmodified-loop-condition": "error", // 禁止死循环
            "no-with": "error", // 禁止使用with语句
            "no-catch-shadow": "error" // 禁止 catch 子句的参数与外层作用域中的变量同名
        }
    }