'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by lin.chen on 2017/7/11.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


// 引入了React和PropTypes
// PropTypes是用于检查props参数类型，可有可无，最好是有

/* 以类的方式创建一个组件 */
var Com = function (_React$Component) {
    _inherits(Com, _React$Component);

    function Com(props) {
        _classCallCheck(this, Com);

        var _this = _possibleConstructorReturn(this, (Com.__proto__ || Object.getPrototypeOf(Com)).call(this, props));

        _this.state = {};
        return _this;
    }

    /* 组件初始化完毕时触发 */


    _createClass(Com, [{
        key: 'componentDidMount',
        value: function componentDidMount() {}

        /* 渲染组件 */

    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'span',
                    null,
                    this.props.value
                ),
                _react2.default.createElement(
                    'button',
                    { onClick: function onClick() {
                            return _this2.props.onAdd(_this2.props.value);
                        } },
                    '\u52A0'
                ),
                _react2.default.createElement(
                    'button',
                    { onClick: function onClick() {
                            return _this2.props.onSubtract(_this2.props.value);
                        } },
                    '\u51CF'
                )
            );
        }
    }]);

    return Com;
}(_react2.default.Component);

/* 下面是对该组件中涉及到的prop数据进行类型检查，如果类型不匹配会发出警告 */


Com.propTypes = {
    value: _react.PropTypes.number,
    onAdd: _react.PropTypes.func,
    onSubtract: _react.PropTypes.func
};

exports.default = Com;