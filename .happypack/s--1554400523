'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _testGeolocation = require('../../component/test/testGeolocation');

var _testGeolocation2 = _interopRequireDefault(_testGeolocation);

var _app_action = require('../../action/app_action');

var _app_action2 = _interopRequireDefault(_app_action);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by lin.chen on 2017/8/2.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


//action


//dispatch,给redux管理的变量
var storeToProps = function storeToProps(state) {
    return {
        dispatch: state.dispatch,
        value: state.app.value
    };
};

var mapDispatch = function mapDispatch(dispatch) {
    return {
        fn: {
            getGeoInfo: function getGeoInfo(v) {
                dispatch(_app_action2.default.getGeoInfo(v));
            }
        }
    };
};

var TestGeoComp = function (_Component) {
    _inherits(TestGeoComp, _Component);

    function TestGeoComp(props) {
        _classCallCheck(this, TestGeoComp);

        return _possibleConstructorReturn(this, (TestGeoComp.__proto__ || Object.getPrototypeOf(TestGeoComp)).call(this, props));
    }

    _createClass(TestGeoComp, [{
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(_testGeolocation2.default, { getGeoInfo: this.props.fn.getGeoInfo })
            );
        }
    }]);

    return TestGeoComp;
}(_react.Component);

TestGeoComp.propTypes = {
    dispatch: _react.PropTypes.func,
    fn: _react.PropTypes.object,
    value: _react.PropTypes.string
};

exports.default = (0, _reactRedux.connect)(storeToProps, mapDispatch)(TestGeoComp);